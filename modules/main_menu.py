from utils.buttons_menu import buttons
from telethon.tl.custom import Message
from my_types.basic import Basket
from products.pizzas import *
from products.drinks import *
from products.sauces import *
from telethon import events, Button
from telethon.tl.types import User
from typing import Union
import logging
import asyncio
Event = Union[Message, events.NewMessage]

lists = {"üçï –ü—ñ—Ü–∞": pizzas_list,
         "ü•§ –ù–∞–ø–æ—ó": drinks_list,
         "üç≤ –°–æ—É—Å–∏": sauces_list}
datas = {"üçï –ü—ñ—Ü–∞": "pizza",
         "ü•§ –ù–∞–ø–æ—ó": "drinks",
         "üç≤ –°–æ—É—Å–∏": "sauces"}

async def init(bot, img_cache, global_bucket):
    @bot.on(events.NewMessage(pattern="^/(start|new)($|@.+)"))
    async def start_command(event:Event):
        global_bucket[str(event.chat_id)] = Basket()
        main_text = "–ü—Ä–∏–≤—ñ—Ç, —è –±–æ—Ç **Pizzatime**! –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –º–µ–Ω–µ –≤–∏ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n" \
                    "**–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é.**"
        await event.respond(main_text, buttons=buttons.main_menu)

    @bot.on(events.NewMessage(func=lambda x: x.text in ["üçï –ü—ñ—Ü–∞", "üç≤ –°–æ—É—Å–∏", "ü•§ –ù–∞–ø–æ—ó"]))
    async def pizza_menu(event: Event):
        _List = lists[event.text]
        _data = datas[event.text]
        try:
            await event.respond(_List[0].parse(),
                                file=img_cache[_List[0].__name__],
                                buttons=buttons.products_menu(len(_List) - 1, event.chat_id, 1, 0, _data))
        except KeyError:
            pass
        except Exception as e:
            file = await bot.upload_file(_List[0]().img)
            img_cache[_List[0].__name__] = file
            await event.respond(_List[0].parse(),
                                file=file,
                                buttons=buttons.products_menu(len(_List) - 1, event.chat_id, 1, 0, _data))
            raise e

    @bot.on(events.NewMessage(func=lambda x: x.text == "üõí –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–æ—à–∏–∫"))
    async def check_basket(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        await event.respond(basket.parse_products(), buttons=buttons.main_menu)

    @bot.on(events.NewMessage(func=lambda x: x.text == "üìã –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"))
    async def ask_contacts(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        if not len(basket):
            await event.respond("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è..", buttons=buttons.main_menu)
            return
        await event.respond("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏", buttons=buttons.payment_button)

    @bot.on(events.NewMessage(func=lambda x: x.text == "üíµ –û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é"))
    async def in_cash(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        basket.payment_method = "–≥–æ—Ç—ñ–≤–∫–æ—é"
        await event.respond("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.", buttons=buttons.contacts_button)

    @bot.on(events.NewMessage(func=lambda x: x.text == "üí≥ –û–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∞—Ä—Ç–∫—É"))
    async def in_card(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        await event.respond("`–û—Ç—Ä–∏–º—É–≤–∞—á:`\n–û–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á\n`–ö–∞—Ä—Ç–∫–∞:`\n5169360006344356")
        basket.payment_method = "–Ω–∞ –∫–∞—Ä—Ç–∫—É"
        await asyncio.sleep(3)
        await event.respond("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–æ–¥—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤.", buttons=buttons.contacts_button)

    @bot.on(events.NewMessage(func=lambda x: x.text == "üçï –ü—ñ—Ü–∞ –∑ –ø–æ–ª–æ–≤–∏–Ω–æ–∫"))
    async def half_pizzas(event: Event):
        await event.respond("–û–±–µ—Ä—ñ—Ç—å –¥–≤—ñ –ø–æ–ª–æ–≤–∏–Ω–∫–∏:", buttons=buttons.halfs_menu())

    @bot.on(events.NewMessage(func=lambda x: x.text == "‚Ü™ –ú–µ–Ω—é"))
    async def _main_menu(event: Event):
        await event.respond("**–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**", buttons=buttons.main_menu)

    @bot.on(events.NewMessage(func=lambda x: any(x.text == item.name for item in halfs_pizzas)))
    async def waiting_part(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        for item in halfs_pizzas:
            if item.name == event.text:
                break
        basket.set_part(item())
        if basket.waiting_for_part:
            await event.respond("–û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –ø–æ–ª–æ–≤–∏–Ω–∫—É:", buttons=buttons.halfs_menu(True))
        else:
            await event.respond("–ü—ñ—Ü–∞ –∑ –ø–æ–ª–æ–≤–∏–Ω–æ–∫ –¥–æ–¥–∞–Ω–∞ –¥–æ –≤–∞—à–æ–≥–æ –∫–æ—à–∏–∫–∞.\n**–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é**",
                                buttons=buttons.main_menu)

    @bot.on(events.NewMessage(func=lambda x: x.text == "üì© –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"))
    async def contacts(event: Event):
        text = "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n`–¢–µ–ª.:` +380 96 744 222 4\n`Inst.:` pizzatimebc –∑–∞–º–æ–≤–∏—Ç–∏ –≤ direct\n" \
               "`Web.:` [www.pizzatime.com.ua](https://www.pizzatime.com.ua/)\n\n–°–ø—ñ–≤–ø—Ä–∞—Ü—è —Ç–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:\n" \
               "`Email:` pizzatimebc.info@gmail.com"
        await event.respond(text, link_preview=False, buttons=buttons.main_menu)

    @bot.on(events.NewMessage(pattern="^–í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É$"))
    async def ask_phone(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        basket.waiting_for_contacts = True
        await event.respond("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:", buttons=buttons.wait_for_input)
        raise events.StopPropagation()

    @bot.on(events.NewMessage(pattern="^–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å—É$"))
    async def ask_address(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        basket.waiting_for_address = True
        await event.respond("–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞:\n`–ë—É–¥—å –ª–∞—Å–∫–∞, —É–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ/–Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É/–ø—ñ–¥'—ó–∑–¥/–∫–≤–∞—Ä—Ç–∏—Ä—É`", buttons=buttons.wait_for_input)
        raise events.StopPropagation()

    # Global msg reader
    @bot.on(events.NewMessage)
    async def listen_to_chat(event: Event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        if basket.waiting_for_contacts:
            basket.add_contacts(event.text)
            basket.waiting_for_contacts = False
            await event.respond("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.", buttons=buttons.address_buttons)

        elif basket.waiting_for_address:
            basket.add_address(event.text)
            basket.waiting_for_address = False
            # Show details and ask last time
            await event.respond(basket.parse(),
                                parse_mode="html",
                                link_preview=False)
            if isinstance(event.chat, User):
                first_name = event.chat.username
            else:
                first_name = 0
            if first_name is None:
                first_name = 0
            await event.respond("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n(–©–æ–± —Å—Ç–µ—Ä—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å `/new`)",
                                buttons=buttons.accept_order(event.chat_id, first_name))
        elif basket.waiting_for_odd_info:
            basket.add_odd_info(event.text)
            basket.waiting_for_odd_info = False
            # Done
            await event.respond(basket.parse(),
                                parse_mode="html",
                                link_preview=False,
                                buttons=buttons.clear)
            if isinstance(event.chat, User):
                first_name = event.chat.first_name
            else:
                first_name = 0
            await event.respond("–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n(–©–æ–± —Å—Ç–µ—Ä—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å `/new`)",
                                buttons=buttons.accept_order(event.chat_id, first_name))

    # Accept geo or phone num
    @bot.on(events.NewMessage(func=lambda x: any([x.contact, x.geo])))
    async def shared_data(event):
        try:
            basket = global_bucket[str(event.chat_id)]
        except:
            global_bucket[str(event.chat_id)] = Basket()
            basket = global_bucket[str(event.chat_id)]
        if event.contact:
            basket.add_contacts(event.media.phone_number)
            await event.respond("–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.", buttons=buttons.address_buttons)
        elif event.geo:
            basket.add_address(event.geo)
            await event.respond("–í–∫–∞–∂—ñ—Ç—å –±—É–¥–∏–Ω–æ–∫/–ø–æ–≤–µ—Ä—Ö/–∫–≤–∞—Ä—Ç–∏—Ä—É:", buttons=buttons.wait_for_input)

